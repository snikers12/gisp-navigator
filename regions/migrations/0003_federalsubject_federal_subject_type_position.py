# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-12 04:34
from __future__ import unicode_literals
import json
import os

from django.db import migrations, models

DATA_PATH = os.path.join(os.path.dirname(__file__), 'data', '0003')


def forwards_func(apps, schema_editor):
    migrate_fs_type_position(apps, schema_editor, forward=True)


def reverse_func(apps, schema_editor):
    migrate_fs_type_position(apps, schema_editor, forward=False)


class Migration(migrations.Migration):
    atomic = True

    dependencies = [
        ('regions', '0002_data_federal_subjects'),
    ]

    operations = [
        migrations.AddField(
            model_name='federalsubject',
            name='federal_subject_type_position',
            field=models.CharField(blank=True, choices=[('prefix', 'В начале'), ('suffix', 'В конце'), ('omit', 'Не используется')], default=None, max_length=6, null=True, verbose_name='Позиция типа субъекта'),
        ),
        migrations.AlterField(
            model_name='federalsubjecttype',
            name='is_prefix',
            field=models.NullBooleanField(default=None, verbose_name='Название перед субъектом'),
        ),
        migrations.RunPython(forwards_func, reverse_func),
        migrations.RemoveField(
            model_name='federalsubjecttype',
            name='is_prefix',
        ),
        migrations.AlterField(
            model_name='federalsubject',
            name='federal_subject_type_position',
            field=models.CharField(choices=[('prefix', 'В начале'), ('suffix', 'В конце'),
                                            ('omit', 'Не используется')], max_length=6,
                                   verbose_name='Позиция типа субъекта'),
        ),
    ]


def migrate_fs_type_position(apps, schema_editor, forward=True):
    FederalSubject = apps.get_model("regions", "FederalSubject")
    FederalSubjectType = apps.get_model("regions", "FederalSubjectType")

    data_list = []
    with open(DATA_PATH + '/federal_subject__type_position.jsonl', 'rt') as jsonl_file:
        for line in jsonl_file:
            id_, name, position = read_jsonl(line)
            data = dict(id=id_, name=name, position=position)
            data_list.append(data)

    if forward:
        # write custom positions first
        for data in data_list:
            fs = FederalSubject.objects.get(id=data['id'], name=data['name'])
            fs.federal_subject_type_position = data['position']
            fs.save(update_fields=['federal_subject_type_position'])

        # move old positions
        for fs in FederalSubjectType.objects.all():
            federal_subject_type_position = 'prefix' if fs.is_prefix else 'suffix'
            (FederalSubject.objects
             .filter(federal_subject_type=fs, federal_subject_type_position__isnull=True)
             .update(federal_subject_type_position=federal_subject_type_position))
    else:
        non_modified_fs = list(FederalSubject.objects
                               # filter out custom positions
                               .exclude(id__in=[data['id'] for data in data_list])
                               .filter(federal_subject_type_position__isnull=False)
                               .values_list('federal_subject_type', 'federal_subject_type_position')
                               .distinct())
        assert len(non_modified_fs) == len(FederalSubjectType.objects.all())
        for fst_id, federal_subject_type_position in non_modified_fs:
            assert federal_subject_type_position in ('prefix', 'suffix')
            is_prefix = federal_subject_type_position == 'prefix'
            FederalSubjectType.objects.filter(id=fst_id).update(is_prefix=is_prefix)


def read_jsonl(line):
    return json.loads(line.replace(r',\N', ',null'))
